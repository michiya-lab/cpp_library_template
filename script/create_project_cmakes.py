import os
import sys
from argparse import ArgumentParser

def get_option():
    argparser = ArgumentParser()
    argparser.add_argument('-n', '--name', type=str,
                           default="TEMPLATE",
                           help='Your library name')
    argparser.add_argument('-b', '--build_main', action='store_true',
                           help='Build main.cpp')
    return argparser.parse_args()

def create_example_cmakelists(arg_project_name):
    dirname = os.path.dirname(os.path.abspath("__file__"))
    with open(dirname + '/../examples/CMakeLists.txt', mode='w',encoding='UTF-8') as f:
        f.write("cmake_minimum_required(VERSION 3.17)\n")
        f.write("PROJECT(EXAMPLE_" + arg_project_name + " CXX)    \n")
        f.write("include(\"${CMAKE_CURRENT_LIST_DIR}/../modules.cmake/myconfig.cmake\")\n")
        f.write("LOAD_MY_CONFIG()    \n")
        f.write("# main\n")
        f.write("add_executable(${PROJECT_NAME} example.cpp)\n")
        f.write("set_target_properties(\n")
        f.write("    ${PROJECT_NAME}\n")
        f.write("    PROPERTIES\n")
        f.write("    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/example\n")
        f.write(")\n")
        f.write("include(\"${CMAKE_CURRENT_SOURCE_DIR}/../modules.cmake/project.cmake\")\n")
        f.write("LOAD_SETTING_" + arg_project_name + "_MODULE(${PROJECT_NAME})\n")

def create_common_cmakelists(arg_project_name):
    dirname = os.path.dirname(os.path.abspath("__file__"))
    with open(dirname + '/../modules.cmake/project.cmake', mode='w',encoding='UTF-8') as f:
        f.write("########################################################################################\n")
        f.write("### Definittion  : USE_DEFINITTION1, USE_DEFINITION2, ...\n")
        f.write("### Source Dir.  : " + arg_project_name + "_SOURCE_DIR\n")
        f.write("### Include Dir. : " + arg_project_name + "_INCLUDE_DIR\n")
        f.write("########################################################################################\n")
        f.write("set_property(GLOBAL PROPERTY PATH_" + arg_project_name + "_MODULE \"${CMAKE_CURRENT_LIST_DIR}\")\n")
        f.write("macro(LOAD_DEFINITION_" + arg_project_name + "_MODULE MACRO_ARG)\n")
        f.write("    ### You can change USE_DEFINITION (cmake arg) and ENABLE_DEFINITION (source)\n")
        f.write("    ### ex. cmake -DUSE_DIFINITION=ON ../\n")
        f.write("    option(USE_DEFINITION1 \"Use definition\" OFF)\n")
        f.write("    if(USE_DEFINITION1)\n")
        f.write("        target_compile_definitions(${MACRO_ARG} PRIVATE ENABLE_DEFINITION1)\n")
        f.write("    endif()\n")
        f.write("    option(USE_DEFINITION2 \"Use definition2\" OFF)\n")
        f.write("    if(USE_DEFINITION2)\n")
        f.write("        target_compile_definitions(${MACRO_ARG} PRIVATE ENABLE_DEFINITION2)\n")
        f.write("    endif()\n")
        f.write("endmacro()\n")
        f.write("macro(SET_" + arg_project_name + "_VARIABLES)\n")
        f.write("    get_property(MY_MODULE_PATH GLOBAL PROPERTY PATH_" + arg_project_name + "_MODULE)\n")
        f.write("    if(NOT DEFINED " + arg_project_name + "_LIB_NAME)\n")
        f.write("        set(" + arg_project_name + "_LIB_NAME \"" + arg_project_name + "\")\n")
        f.write("        get_property(\n")
        f.write("            MY_MODULE_PATH\n")
        f.write("            GLOBAL PROPERTY\n")
        f.write("            PATH_" + arg_project_name + "_MODULE\n")
        f.write("            )\n")
        f.write("        set(\n")
        f.write("            " + arg_project_name + "_SOURCE_DIR\n")
        f.write("            \"${MY_MODULE_PATH}/../src/child\"\n")
        f.write("            \"${MY_MODULE_PATH}/../src/parent\"\n")
        f.write("            )\n")
        f.write("        set(\n")
        f.write("            " + arg_project_name + "_INCLUDE_DIR\n")
        f.write("            \"${MY_MODULE_PATH}/../src/child\"\n")
        f.write("            \"${MY_MODULE_PATH}/../src/parent\"\n")
        f.write("            )\n")
        f.write("    endif()\n")
        f.write("endmacro()\n")
        f.write("macro(LOAD_DEPENDENCIES_" + arg_project_name +"_MODULE MACRO_ARG)\n")
        f.write("    SET_" + arg_project_name + "_VARIABLES()\n")
        f.write("    add_dependencies(${MACRO_ARG} ${" + arg_project_name + "_LIB_NAME})\n")
        f.write("endmacro()\n")
        f.write("macro(LOAD_LINKS_" + arg_project_name + "_MODULE MACRO_ARG)\n")
        f.write("    SET_" + arg_project_name + "_VARIABLES()\n")
        f.write("    target_link_libraries(\n")
        f.write("        ${MACRO_ARG}\n")
        f.write("        PRIVATE ${" + arg_project_name + "_LIB_NAME}\n")
        f.write("        )\n")
        f.write("endmacro()\n")
        f.write("macro(LOAD_INCLUDES_" + arg_project_name + "_MODULE MACRO_ARG)\n")
        f.write("    SET_" + arg_project_name + "_VARIABLES()\n")
        f.write("    target_include_directories(\n")
        f.write("        ${MACRO_ARG}\n")
        f.write("        PRIVATE ${" + arg_project_name + "_INCLUDE_DIR}\n")
        f.write("    )\n")
        f.write("endmacro()\n")
        f.write("macro(LOAD_SETTING_" + arg_project_name + "_MODULE MACRO_ARG)\n")
        f.write("    LOAD_DEPENDENCIES_" + arg_project_name + "_MODULE(${MACRO_ARG})\n")
        f.write("    LOAD_LINKS_" + arg_project_name + "_MODULE(${MACRO_ARG})\n")
        f.write("    LOAD_INCLUDES_" + arg_project_name + "_MODULE(${MACRO_ARG})\n")
        f.write("    LOAD_DEFINITION_" + arg_project_name + "_MODULE(${MACRO_ARG})\n")
        f.write("endmacro()\n")

def create_src_cmakelists(arg_project_name):
    dirname = os.path.dirname(os.path.abspath("__file__"))
    with open(dirname+'/../src/CMakeLists.txt', mode='w',encoding='UTF-8') as f:
        f.write("cmake_minimum_required(VERSION 3.17)\n")
        f.write("PROJECT(" + arg_project_name + "_SRC CXX)\n")
        f.write("include(\"${CMAKE_CURRENT_LIST_DIR}/../modules.cmake/myconfig.cmake\")\n")
        f.write("LOAD_MY_CONFIG()\n")
        f.write("## main\n")
        f.write("include(\"${CMAKE_CURRENT_SOURCE_DIR}/../modules.cmake/project.cmake\")\n")
        f.write("SET_" + arg_project_name + "_VARIABLES()\n")
        f.write("CHECK_DIRECTORIES_EXIST(${" + arg_project_name + "_SOURCE_DIR})\n")
        f.write("CHECK_DIRECTORIES_EXIST(${" + arg_project_name + "_INCLUDE_DIR})\n")
        f.write("FIND_CPP(MY_" + arg_project_name + "_SOURCES \"${" + arg_project_name + "_SOURCE_DIR}\")\n")
        f.write("FIND_HPP(MY_" + arg_project_name + "_HEADERS \"${" + arg_project_name + "_INCLUDE_DIR}\")\n")
        f.write("list(APPEND MY_SOURCES ${MY_" + arg_project_name + "_SOURCES})\n")
        f.write("list(APPEND MY_HEADERS ${MY_" + arg_project_name + "_HEADERS})\n")
        f.write("DEFINE_ADD_LIBRARY(${" + arg_project_name + "_LIB_NAME} \"${MY_SOURCES}\")\n")
        f.write("LOAD_INCLUDES_" + arg_project_name + "_MODULE(${" + arg_project_name + "_LIB_NAME})\n")
        f.write("LOAD_DEFINITION_" + arg_project_name + "_MODULE(${" + arg_project_name + "_LIB_NAME})\n")
        f.write("## install\n")
        f.write("set_target_properties(\n")
        f.write("    ${" + arg_project_name + "_LIB_NAME}\n")
        f.write("    PROPERTIES\n")
        f.write("    PUBLIC_HEADER \"${MY_HEADERS}\"\n")
        f.write("  )\n")
        f.write("install(\n")
        f.write("    TARGETS ${" + arg_project_name + "_LIB_NAME}\n")
        f.write("    EXPORT ${" + arg_project_name + "_LIB_NAME}\n")
        f.write("    ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n")
        f.write("    LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n")
        f.write("    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_PREFIX}/include\n")
        f.write("  )\n")

def create_test_cmakelists(arg_project_name):
    dirname = os.path.dirname(os.path.abspath("__file__"))
    with open(dirname+'/../test/test01/CMakeLists.txt', mode='w',encoding='UTF-8') as f:
        f.write("cmake_minimum_required(VERSION 3.17)\n")
        f.write("project(" + arg_project_name + "_01 CXX)\n")
        f.write("set(TEST_NAME \"UNIT_TEST_${PROJECT_NAME}\")\n")
        f.write("file(GLOB SOURCE \"*.cpp\")\n")
        f.write("add_executable(${PROJECT_NAME} ${SOURCE})\n")
        f.write("#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n")
        f.write("# include\n")
        f.write("include(\"${CMAKE_CURRENT_SOURCE_DIR}/../../modules.cmake/googletest.cmake\")\n")
        f.write("LOAD_SETTING_GOOGLETEST_MODULE(${PROJECT_NAME})\n")
        f.write("include(\"${CMAKE_CURRENT_SOURCE_DIR}/../../modules.cmake/project.cmake\")\n")
        f.write("LOAD_SETTING_" + arg_project_name + "_MODULE(${PROJECT_NAME})\n")
        f.write("#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n")
        f.write("add_test(\n")
        f.write("    NAME ${TEST_NAME}\n")
        f.write("    COMMAND ${PROJECT_NAME} --gtest_output=xml:\n")
        f.write(")\n")
        f.write("set_tests_properties(${TEST_NAME} PROPERTIES TIMEOUT 1)        \n")

def create_main_cmakelists(arg_project_name, build_main):
    dirname = os.path.dirname(os.path.abspath("__file__"))
    with open(dirname + '/../CMakeLists.txt', mode='w',encoding='UTF-8') as f:
        f.write("cmake_minimum_required(VERSION 3.17)\n")
        f.write("PROJECT(" + arg_project_name + "_MAIN CXX)\n")
        f.write("#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<f\n")
        f.write("# src\n")
        f.write("add_subdirectory(src)\n")
        f.write("#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n")
        f.write("#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<f\n")
        f.write("# example\n")
        f.write("if(BUILD_EXAMPLES)\n")
        f.write("    add_subdirectory(examples)\n")
        f.write("endif()\n")
        f.write("#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n")
        f.write("#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n")
        f.write("# test\n")
        f.write("if (BUILD_TESTING)\n")
        f.write("    enable_testing()\n")
        f.write("    add_subdirectory(test)\n")
        f.write("endif()\n")
        f.write("#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n")
        if build_main:
            f.write("#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n")
            f.write("# main\n")
            f.write("file(GLOB SOURCES \"*.cpp\")\n")
            f.write("add_executable(${PROJECT_NAME} ${SOURCES})\n")
            f.write("include(\"${CMAKE_CURRENT_LIST_DIR}/modules.cmake/project.cmake\")\n")
            f.write("LOAD_SETTING_" + arg_project_name + "_MODULE(${PROJECT_NAME})\n")
            f.write("install(\n")
            f.write("    TARGETS ${PROJECT_NAME}\n")
            f.write("    EXPORT ${PROJECT_NAME}\n")
            f.write("  )\n")
            f.write("#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n")


def main():
    if len(sys.argv) < 2:
        print("*****************************************************")
        print(" !!! ERROR !!!")
        print("***  Please give <ProjectName>")
        print("***  Ex.) python3 create_project_cmake.py <ProjectName>")
        print("*****************************************************")
        sys.exit()
    print("Start script ...")
    args = get_option()
    create_example_cmakelists(args.name)
    create_common_cmakelists(args.name)
    create_src_cmakelists(args.name)
    create_test_cmakelists(args.name)
    create_main_cmakelists(args.name, args.build_main)
    print("Done")

if __name__ == "__main__":
    main()
